#!/usr/bin/env python3\n\"\"\"\nDebug Path Planning Live\n\nThis script debugs the path planning during actual robot execution\nto see if obstacles are being detected and avoided.\n\"\"\"\n\nimport time\nfrom simulation.mujoco_env import SimpleMuJoCoPhysics\nfrom robot.robot_agent import RobotAgent, RobotConfiguration\nfrom warehouse.map import WarehouseMap\nfrom interfaces.task_handler_interface import Task, TaskType\n\n\ndef debug_path_planning_live():\n    \"\"\"Debug path planning during live execution.\"\"\"\n    print(\"=== LIVE PATH PLANNING DEBUG ===\")\n    \n    # Create the same setup as the working demo\n    warehouse_map = WarehouseMap()\n    physics = SimpleMuJoCoPhysics(warehouse_map)\n    robot = RobotAgent(\n        warehouse_map=warehouse_map,\n        physics=physics,\n        config=RobotConfiguration(robot_id=\"debug_robot\")\n    )\n    \n    print(f\"Warehouse dimensions: {warehouse_map.width}x{warehouse_map.height}\")\n    \n    # Access the path planner directly\n    path_planner = robot.path_planner_interface\n    \n    # Check obstacles\n    obstacles = path_planner.get_static_obstacles()\n    print(f\"Path planner has {len(obstacles)} obstacles:\")\n    for i, obstacle in enumerate(sorted(obstacles, key=lambda c: (c.y, c.x))):\n        if i < 10:  # Show first 10\n            world_pos = robot.coordinate_system.cell_to_world(obstacle)\n            print(f\"  Cell({obstacle.x}, {obstacle.y}) -> World({world_pos[0]:.2f}, {world_pos[1]:.2f})\")\n        elif i == 10:\n            print(f\"  ... and {len(obstacles) - 10} more obstacles\")\n            break\n    \n    # Test path planning with the same targets as the demo\n    start_pos = warehouse_map.start_position\n    test_targets = [\n        (3.25, 3.25),  # Same as hybrid demo\n        (6.0, 2.0),\n        (2.0, 5.0),\n    ]\n    \n    print(f\"\\nStart position: ({start_pos[0]:.2f}, {start_pos[1]:.2f})\")\n    \n    for i, target in enumerate(test_targets):\n        print(f\"\\nTest {i+1}: Planning path to ({target[0]:.2f}, {target[1]:.2f})\")\n        \n        try:\n            path = path_planner.plan_path(start=start_pos[:2], goal=target)\n            print(f\"  SUCCESS: Path found with {len(path.cells)} cells\")\n            print(f\"  Total distance: {path.total_distance:.2f}m\")\n            \n            # Show first few path cells\n            print(\"  First 5 path cells:\")\n            for j, cell in enumerate(path.cells[:5]):\n                world_pos = robot.coordinate_system.cell_to_world(cell)\n                print(f\"    {j}: Cell({cell.x}, {cell.y}) -> World({world_pos[0]:.2f}, {world_pos[1]:.2f})\")\n                \n            # Check if path goes through obstacles (shouldn't happen)\n            path_through_obstacles = False\n            for cell in path.cells:\n                if cell in obstacles:\n                    print(f\"  ERROR: Path goes through obstacle at Cell({cell.x}, {cell.y})!\")\n                    path_through_obstacles = True\n                    break\n            \n            if not path_through_obstacles:\n                print(f\"  GOOD: Path avoids all obstacles\")\n                \n        except Exception as e:\n            print(f\"  FAILED: {e}\")\n    \n    print(\"\\n=== LIVE DEBUG COMPLETE ===\")\n\n\nif __name__ == \"__main__\":\n    debug_path_planning_live() 